.include "macroLibrary.m"

.eqv    NAME_SIZE 256	# Размер буфера для имени файла
.eqv    TEXT_SIZE 3 	# Размер буфера для текста

.text
func:
	push(ra)
	li t0 -1 		# Проверка на корректное открытие
	beq a0 t0 error_name 	# Ошибка открытия файла
	mv t1 a0 		# Сохранение дескриптора файла
	allocate_memory(TEXT_SIZE) 	# Выделение начального блока памяти для для буфера в куче
	mv t2 a0 		# Сохранение адреса кучи в регистре
	mv t3 a0 		# Сохранение изменяемого адреса кучи в регистре 
	li t4 TEXT_SIZE 	# Сохранение константы для обработки
	mv t5 zero 		# Установка длины прочитанного текста
	
# Чтение информации из открытого файла
read_loop:
	read_from_registr(t1, t3, TEXT_SIZE)  	# Чтение для адреса блока из регистра
	beq a0 t0 er_read		# Ошибка чтения
	mv t6 a0 			# Сохранение длины текста
	add t5 t5 t6			# Размер текста увеличивается на прочитанную порцию
	bne t6 t4 end_loop		# При длине прочитанного текста меньшей, чем размер буфера, завершить процесс.
	allocate_memory(TEXT_SIZE) 	#Расширить буфер и повторить
	add t3 t3 t6			# Адрес для чтения смещается на размер порции
    	b read_loop			# Обработка следующей порции текста из файла
    	
# Закрытие файла
end_loop:
	close(t1) 		# Макрос закрытия файла
	mv t0 t2		# Адрес буфера в куче
	add t0 t0 t5		# Адрес последнего прочитанного символа
	addi t0 t0 1		# Место для нуля
	sb zero (t0)		# Запись нуля в конец текста
	mv a0 t2 		# Адрес начала буфера из кучи
	pop(ra)
	ret
